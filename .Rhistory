sex = ifelse(sex == "female", 0, 1)
)
fit <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
summary(fit)
library(bellreg)
data(cells)
head(cells)
library(tidyverse)
cells <- cells %>%
mutate(
smoker = ifelse(smoker == TRUE, 0, 1),
sex = ifelse(sex == "female", 0, 1)
)
fit <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
summary(fit)
fit
fit$fit$hessian
object <- fit
std <- diag(1/object$v_sd)
sdt
std
bayes <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, approach = "bayes")
summary(bayes)
summary(bayes)
summary(bayes)
summary(fit)
rstan::traceplot(bayes$fit)
rstan::traceplot(bayes$fit, pars=c("beta", "psi"))
bayes <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, approach = "bayes", hyperpars = list(mu_psi=0, sigma_psi=100, mu_beta=0, sigma_beta=100))
formula <- cells~smoker+sex|smoker+sex
data=cells
formula <- Formula::Formula(formula)
mf <- stats::model.frame(formula=formula, data=data)
Terms <- stats::terms(mf)
Z <- stats::model.matrix(formula, data = mf, rhs = 1)
X <- stats::model.matrix(formula, data = mf, rhs = 2)
Xlabels <- colnames(X)
Zlabels <- colnames(Z)
y <- stats::model.response(mf)
n <- nrow(X)
p <- ncol(X)
q <- ncol(Z)
if(p>1){
if(match("(Intercept)", Xlabels)==1){
X_std <- scale(X[,-1])
x_mean <- array(c(0, attr(X_std, "scaled:center")))
x_sd <- array(c(1, attr(X_std, "scaled:scale")))
X_std <- cbind(1, X_std)
}else{
X_std <- scale(X)
x_mean <- array(attr(X_std, "scaled:center"))
x_sd <- array(attr(X_std, "scaled:scale"))
}
}else{
X_std <- X
x_mean <- array(0)
x_sd <- array(1)
}
if(q>1){
if(match("(Intercept)", Zlabels)==1){
Z_std <- scale(Z[,-1])
z_mean <- array(c(0, attr(Z_std, "scaled:center")))
z_sd <- array(c(1, attr(Z_std, "scaled:scale")))
Z_std <- cbind(1, Z_std)
}else{
Z_std <- scale(Z)
z_mean <- array(attr(Z_std, "scaled:center"))
z_sd <- array(attr(Z_std, "scaled:scale"))
}
}else{
Z_std <- Z
z_mean <- array(0)
z_sd <- array(1)
}
z_sd
z_mean
V <- diag(z_sd)
V
z_mean/z_sd
V <- diag(z_sd)
V
teste <- V[1,] +  z_mean/z_sd
teste
V <- diag(z_sd)
V <- diag(z_sd)
copia <- V
V[1,] <- V[1,] +  z_mean/z_sd
V
copia
Delta <- diag(1/z_sd)
Delta <- Delta[1,] +  z_mean/z_sd
Delta1 <- diag(1/z_sd)
Delta1 <- Delta[1,] +  z_mean/z_sd
Delta2 <- diag(1/x_sd)
Delta1 <- diag(1/z_sd)
Delta1 <- Delta1[1,] +  z_mean/z_sd
Delta2 <- diag(1/x_sd)
Delta2 <- Delta2[1,] +  x_mean/x_sd
Delta <- diag(Delta1, Delta2)
Delta
Delta1 <- diag(1/z_sd)
Delta1 <- Delta1[1,] +  z_mean/z_sd
Delta2 <- diag(1/x_sd)
Delta2 <- Delta2[1,] +  x_mean/x_sd
Delta <- diag(Delta1, Delta2)
Delta
Delta <- bdiag(Delta1, Delta2)
Delta <- matrix::bdiag(Delta1, Delta2)
install.packages("matrix")
install.packages("Matrix")
Delta_z <- diag(1/z_sd)
Delta_z <- Delta_z[1,] +  z_mean/z_sd
Delta_x <- diag(1/x_sd)
Delta_x <- Delta_x[1,] +  x_mean/x_sd
Delta <- Matrix::bdiag(Delta_z, Delta_x)
Delta
Delta_z
Delta_z <- diag(1/z_sd)
Delta_z[1,] <- Delta_z[1,] +  z_mean/z_sd
Delta_z
Delta_x <- diag(1/x_sd)
Delta_x[1,] <- Delta_x[1,] +  x_mean/x_sd
Delta_x
Delta <- Matrix::bdiag(Delta_z, Delta_x)
Delta
diag(Delta_z, Delta_x)
?bdiag
Delta_z %x% Delta_x
V
V <- MASS::ginv(object$fit$hessian)
V
teste <- Delta%*%V%*%Delta
sqrt(diag(teste))
teste
class(teste)
diag(teste)
Delta <- magick::adiag(Delta_z, Delta_x)
install.packages(magic)
install.packages("magic")
Delta <- magik::adiag(Delta_z, Delta_x)
Delta <- magic::adiag(Delta_z, Delta_x)
Delta
class(delta)
class(Delta)
teste <- Delta%*%V%*%Delta
sqrt(diag(teste))
teste
Delta_z <- diag(1/z_sd)
Delta_z[1,] <- Delta_z[1,] -  z_mean/z_sd
Delta_z
Delta_x <- diag(1/x_sd)
Delta_x[1,] <- Delta_x[1,] -  x_mean/x_sd
Delta_x
Delta <- Matrix::bdiag(Delta_z, Delta_x)
Delta <- magic::adiag(Delta_z, Delta_x)
teste <- Delta%*%V%*%Delta
sqrt(diag(teste))
summary(fit)
sqrt(diag(teste))
fit <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
fit <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
V <- MASS::ginv(object$fit$hessian)
Delta_z <- diag(1/z_sd)
Delta_z[1,] <- Delta_z[1,] -  z_mean/z_sd
Delta_z
Delta_x <- diag(1/x_sd)
Delta_x[1,] <- Delta_x[1,] -  x_mean/x_sd
Delta_x
Delta <- magic::adiag(Delta_z, Delta_x)
teste <- Delta%*%V%*%Delta
sqrt(diag(teste))
Delta_x
Delta_z
teste <- Delta%*%V%*%t(Delta)
sqrt(diag(teste))
z_sd <- array(attr(Z_std, "scaled:scale"))
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
usethis::use_build_ignore(".travis.yml")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
# devtools::check_win_devel()
# rhub::check_for_cran()
# devtools::build_manual()
# git remote add origin https://github.com/fndemarqui/bellreg.git
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
usethis::use_build_ignore(".travis.yml")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
# devtools::check_win_devel()
# rhub::check_for_cran()
# devtools::build_manual()
# git remote add origin https://github.com/fndemarqui/bellreg.git
fit <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
vcov(fit)
fit
names(fit)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
usethis::use_build_ignore(".travis.yml")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
# devtools::check_win_devel()
# rhub::check_for_cran()
# devtools::build_manual()
# git remote add origin https://github.com/fndemarqui/bellreg.git
devtools::load_all(".")
library(bellreg)
fit <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
names(fit)
fit$
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
usethis::use_build_ignore(".travis.yml")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
# devtools::check_win_devel()
# rhub::check_for_cran()
# devtools::build_manual()
# git remote add origin https://github.com/fndemarqui/bellreg.git
library(bellreg)
fit <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
fit$Delta
sqrt(diag(vcov(fit)))
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
usethis::use_build_ignore(".travis.yml")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
# devtools::check_win_devel()
# rhub::check_for_cran()
# devtools::build_manual()
# git remote add origin https://github.com/fndemarqui/bellreg.git
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
usethis::use_build_ignore(".travis.yml")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
# devtools::check_win_devel()
# rhub::check_for_cran()
# devtools::build_manual()
# git remote add origin https://github.com/fndemarqui/bellreg.git
fit <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
library(bellreg)
fit <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
usethis::use_build_ignore(".travis.yml")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
# devtools::check_win_devel()
# rhub::check_for_cran()
# devtools::build_manual()
# git remote add origin https://github.com/fndemarqui/bellreg.git
library(bellreg)
fit <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
library(bellreg)
fit <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
usethis::use_build_ignore(".travis.yml")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
# devtools::check_win_devel()
# rhub::check_for_cran()
# devtools::build_manual()
# git remote add origin https://github.com/fndemarqui/bellreg.git
library(bellreg)
fit <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
summary(fit)
V <- MASS::ginv(object$fit$hessian)
Delta_z <- diag(1/z_sd)
library(bellreg)
fit <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
summary(fit)
fit <- zibellreg(nf~lroll, data=faults, init=0)
data("faults")
head(faults)
fit <- bellreg(nf~lroll, data=faults, init=0)
summary(fit)
class(fit)
summary(fit)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
usethis::use_build_ignore(".travis.yml")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
# devtools::check_win_devel()
# rhub::check_for_cran()
# devtools::build_manual()
# git remote add origin https://github.com/fndemarqui/bellreg.git
summary(fit)
fit <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
teste <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
summary(teste)
mle <- bellreg(nf~lroll, data=faults, init=0)
summary(mle)
class(mle)
object <- mle
#' Print the summary.bellreg output
#'
#' @export
#' @param x an object of the class summary.bellreg.
#' @param ... further arguments passed to or from other methods.
#' @return a summary of the fitted model.
#'
print.summary.bellreg <- function(x, ...){
if(x$approach == "mle"){
cat("Call:\n")
print(x$call)
cat("\n")
cat("Coefficients:\n")
stats::printCoefmat(x$coefficients, P.value=TRUE, has.Pvalue=TRUE)
cat("\n")
# cat("----------------------- \n")
# cat("\n")
cat("logLik =", x$logLik, " ", "AIC =", x$AIC,"\n")
}else{
cat("\n")
print(x$call)
cat("\n")
print(x$coefficients)
cat("\n")
cat("Inference for Stan model: ", x$model_name, '.\n', sep = '')
cat(x$chains, " chains, each with iter=", x$iter,
"; warmup=", x$warmup, "; thin=", x$thin, "; \n",
"post-warmup draws per chain=", x$n_kept[1], ", ",
"total post-warmup draws=", sum(x$n_kept), ".\n\n", sep = '')
}
}
#' Summary for the bellreg model
#'
#' @aliases summary.bellreg
#' @export
#' @param object an objecto of the class 'bellreg'.
#' @param ... further arguments passed to or from other methods.
#'
#'
summary.bellreg <- function(object, ...){
if(object$approach == "mle"){
p <- object$p
labels <- object$labels
coefficients <- object$fit$par
V <- vcov(object)
se <- sqrt(diag(V))
zval <- coefficients / se
TAB <- cbind(Estimate = coefficients,
StdErr = se,
z.value = zval,
p.value = 2*stats::pnorm(-abs(zval)))
if(p==1)
{
TAB <- t(as.matrix(TAB[1:p,]))
}else{
TAB <- TAB[1:p,]
}
rownames(TAB) <- labels
res <- list(call=object$call,
coefficients=TAB,
logLik = object$logLik,
AIC = object$AIC)
}else{
labels <- object$labels
s <- rstan::summary(object$fit, pars=c("beta"))
TAB <- round(s$summary, digits = 3)
rownames(TAB) <- labels
n_kept <- object$fit@sim$n_save - object$fit@sim$warmup2
res <- list(call=object$call, coefficients=TAB,
n_kept=n_kept, model_name=object$fit@model_name,
chains=object$fit@sim$chains, warmup=object$fit@sim$warmup,
thin=object$fit@sim$thin, iter=object$fit@sim$iter, approach=object$approach)
}
res$approach <- object$approach
class(res) <- "summary.bellreg"
return(res)
}
summary.bellreg(object)
if(object$approach == "mle"){
p <- object$p
labels <- object$labels
coefficients <- object$fit$par
V <- vcov(object)
se <- sqrt(diag(V))
zval <- coefficients / se
TAB <- cbind(Estimate = coefficients,
StdErr = se,
z.value = zval,
p.value = 2*stats::pnorm(-abs(zval)))
if(p==1)
{
TAB <- t(as.matrix(TAB[1:p,]))
}else{
TAB <- TAB[1:p,]
}
rownames(TAB) <- labels
res <- list(call=object$call,
coefficients=TAB,
logLik = object$logLik,
AIC = object$AIC)
}else{
labels <- object$labels
s <- rstan::summary(object$fit, pars=c("beta"))
TAB <- round(s$summary, digits = 3)
rownames(TAB) <- labels
n_kept <- object$fit@sim$n_save - object$fit@sim$warmup2
res <- list(call=object$call, coefficients=TAB,
n_kept=n_kept, model_name=object$fit@model_name,
chains=object$fit@sim$chains, warmup=object$fit@sim$warmup,
thin=object$fit@sim$thin, iter=object$fit@sim$iter, approach=object$approach)
}
p <- object$p
labels <- object$labels
coefficients <- object$fit$par
V <- vcov(object)
p <- object$p
labels <- object$labels
coefficients <- object$fit$par
V <- vcov(object)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
usethis::use_build_ignore(".travis.yml")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
# devtools::check_win_devel()
# rhub::check_for_cran()
# devtools::build_manual()
# git remote add origin https://github.com/fndemarqui/bellreg.git
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
usethis::use_build_ignore(".travis.yml")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
# devtools::check_win_devel()
# rhub::check_for_cran()
# devtools::build_manual()
# git remote add origin https://github.com/fndemarqui/bellreg.git
library(bellreg)
fit <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
summary(fit)
mle <- bellreg(nf~lroll, data=faults, init=0)
summary(mle)
library(bellreg)
data(cells)
head(cells)
library(tidyverse)
cells <- cells %>%
mutate(
smoker = ifelse(smoker == TRUE, 0, 1),
sex = ifelse(sex == "female", 0, 1)
)
fit <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, init=0)
summary(fit)
bayes <- zibellreg(cells~smoker+sex|smoker+sex, data=cells, approach = "bayes")
summary(bayes)
summary(fit)
devtools::document()

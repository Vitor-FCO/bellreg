devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
data(faults)
mle <- bellreg(nf~lroll, data=faults, init=0)
summary(mle)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
library(bellreg)
data(faults)
mle <- bellreg(nf~lroll, data=faults, init=0)
summary(mle)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
library(bellreg)
data(faults)
mle <- bellreg(nf~lroll, data=faults, init=0)
summary(mle)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
library(bellreg)
data(faults)
mle <- bellreg(nf~lroll, data=faults, init=0)
summary(mle)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
library(bellreg)
data(faults)
mle <- bellreg(nf~lroll, data=faults, init=0)
summary(mle)
# bayes <- bellreg(nf~lroll, data=faults, approach="bayes")
# print(bayes$fit, pars=c("beta"), digits_summary = 4)
# summary(bayes)
bayes <- bellreg(nf~lroll, data=faults, approach="bayes")
# print(bayes$fit, pars=c("beta"), digits_summary = 4)
summary(bayes)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
# print(bayes$fit, pars=c("beta"), digits_summary = 4)
summary(bayes)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
# print(bayes$fit, pars=c("beta"), digits_summary = 4)
summary(bayes)
object <- bayes
if(object$approach == "mle"){
p <- object$p
labels <- object$labels
coefficients <- object$fit$par
V <- vcov(object)
se <- sqrt(diag(V))
zval <- coefficients / se
TAB <- cbind(Estimate = coefficients,
StdErr = se,
z.value = zval,
p.value = 2*stats::pnorm(-abs(zval)))
if(p==1)
{
TAB <- t(as.matrix(TAB[1:p,]))
}else{
TAB <- TAB[1:p,]
}
rownames(TAB) <- labels
res <- list(call=object$call,
coefficients=TAB,
logLik = object$logLik,
AIC = object$AIC)
class(res) <- "summary.bellreg"
}else{
labels <- object$labels
s <- rstan::summary(object$fit, pars=c("beta"))
TAB <- round(s$summary, digits = 3)
rownames(TAB) <- labels
n_kept <- object$fit@sim$n_save - object$fit@sim$warmup2
res <- list(call=object$call, coefficients=TAB,
n_kept=n_kept, model_name=object$fit@model_name,
chains=object$fit@sim$chains, warmup=object$fit@sim$warmup,
thin=object$fit@sim$thin, iter=object$fit@sim$iter, approach=object$approach)
}
res$approach <- object$approach
res
x <- res
class(x)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
# print(bayes$fit, pars=c("beta"), digits_summary = 4)
summary(bayes)
summary(mle)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
# print(bayes$fit, pars=c("beta"), digits_summary = 4)
summary(bayes)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
# print(bayes$fit, pars=c("beta"), digits_summary = 4)
summary(bayes)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
# print(bayes$fit, pars=c("beta"), digits_summary = 4)
summary(bayes)
mle <- zibell(nf~lroll|lroll, data=faults, init=0)
mle <- zibellreg(nf~lroll|lroll, data=faults, init=0)
mle
summary(mle)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
data(faults)
mle <- zibell(nf~lroll|lroll, data=faults, init=0)
mle <- zibellbeg(nf~lroll|lroll, data=faults, init=0)
mle <- zibellreg(nf~lroll|lroll, data=faults, init=0)
summary(mle)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
summary(mle)
bayes <- bellreg(nf~lroll|lroll, data=faults, approach="bayes")
bayes <- bellreg(nf~lroll|lroll, data=faults, approach="bayes")
formula <- nf~lroll|lroll
data=faults
approach="bayes"
formula <- Formula::Formula(formula)
mf <- stats::model.frame(formula=formula, data=data)
Terms <- stats::terms(mf)
Z <- stats::model.matrix(formula, data = mf, rhs = 1)
X <- stats::model.matrix(formula, data = mf, rhs = 2)
Xlabels <- colnames(X)
Zlabels <- colnames(Z)
y <- stats::model.response(mf)
n <- nrow(X)
p <- ncol(X)
q <- ncol(Z)
if(p>1){
if(match("(Intercept)", Xlabels)==1){
X_std <- scale(X[,-1])
x_mean <- array(c(0, attr(X_std, "scaled:center")))
x_sd <- array(c(1, attr(X_std, "scaled:scale")))
X_std <- cbind(1, X_std)
}else{
X_std <- scale(X)
x_mean <- array(attr(X_std, "scaled:center"))
x_sd <- array(attr(X_std, "scaled:scale"))
}
}else{
X_std <- X
x_mean <- array(0)
x_sd <- array(1)
}
if(q>1){
if(match("(Intercept)", Zlabels)==1){
Z_std <- scale(Z[,-1])
z_mean <- array(c(0, attr(Z_std, "scaled:center")))
z_sd <- array(c(1, attr(Z_std, "scaled:scale")))
Z_std <- cbind(1, Z_std)
}else{
Z_std <- scale(Z)
z_mean <- array(attr(Z_std, "scaled:center"))
z_sd <- array(attr(Z_std, "scaled:scale"))
}
}else{
Z_std <- Z
z_mean <- array(0)
z_sd <- array(1)
}
stan_data <- list(y=y, X=X_std, n=n, p=p, x_mean=x_mean, x_sd=x_sd,
mu_beta = hyperpars$mu_beta, sigma_beta=hyperpars$sigma_beta,
mu_psi = hyperpars$mu_psi, sigma_psi=hyperpars$sigma_psi,
approach=0)
hyperpars = list(mu_psi=0, sigma_psi=10, mu_beta=0, sigma_beta=10)
stan_data <- list(y=y, X=X_std, n=n, p=p, x_mean=x_mean, x_sd=x_sd,
mu_beta = hyperpars$mu_beta, sigma_beta=hyperpars$sigma_beta,
mu_psi = hyperpars$mu_psi, sigma_psi=hyperpars$sigma_psi,
approach=0)
stan_data$approach <- 1
fit <- rstan::sampling(stanmodels$zibell, data=stan_data, verbose=FALSE, ...)
fit <- rstan::sampling(stanmodels$zibell, data=stan_data, verbose=FALSE)
devtools::load_all(".")
fit <- rstan::sampling(stanmodels$zibell, data=stan_data, verbose=FALSE, ...)
fit <- rstan::sampling(stanmodels$zibell, data=stan_data, verbose=FALSE)
names(stan_data)
stan_data <- list(y=y, X=X_std, n=n, p=p, x_mean=x_mean, x_sd=x_sd, z_mean=z_mean, z_sd=z_sd,
mu_beta = hyperpars$mu_beta, sigma_beta=hyperpars$sigma_beta,
mu_psi = hyperpars$mu_psi, sigma_psi=hyperpars$sigma_psi,
approach=0)
stan_data
fit <- rstan::optimizing(stanmodels$zibell, hessian=hessian,
data=stan_data, verbose=FALSE, ...)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
mle <- zibellreg(nf~lroll|lroll, data=faults, init=0)
summary(mle)
bayes <- bellreg(nf~lroll|lroll, data=faults, approach="bayes")
stan_data <- list(y=y, X=X_std, Z=Z_std, n=n, p=p, q=q, x_mean=x_mean, x_sd=x_sd, z_mean=z_mean, z_sd=z_sd,
mu_beta = hyperpars$mu_beta, sigma_beta=hyperpars$sigma_beta,
mu_psi = hyperpars$mu_psi, sigma_psi=hyperpars$sigma_psi,
approach=0)
if(approach=="mle"){
fit <- rstan::optimizing(stanmodels$zibell, hessian=hessian,
data=stan_data, verbose=FALSE, ...)
if(hessian==TRUE){
fit$hessian <- - fit$hessian
}
fit$par <- fit$theta_tilde[-(1:(p+q))]
AIC <- -2*fit$value + 2*(p+q)
fit <- list(fit=fit, logLik = fit$value, AIC = AIC)
}else{
stan_data$approach <- 1
fit <- rstan::sampling(stanmodels$zibell, data=stan_data, verbose=FALSE, ...)
fit <- list(fit=fit)
}
fit <- rstan::sampling(stanmodels$zibell, data=stan_data, verbose=FALSE, ...)
fit <- rstan::sampling(stanmodels$zibell, data=stan_data, verbose=FALSE)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
data(faults)
mle <- zibellreg(nf~lroll|lroll, data=faults, init=0)
summary(mle)
bayes <- bellreg(nf~lroll|lroll, data=faults, approach="bayes")
summary(bayes)
formula <- nf~lroll|lroll
data=faults
approach="bayes"
approach <- match.arg(approach)
formula <- Formula::Formula(formula)
mf <- stats::model.frame(formula=formula, data=data)
Terms <- stats::terms(mf)
Z <- stats::model.matrix(formula, data = mf, rhs = 1)
X <- stats::model.matrix(formula, data = mf, rhs = 2)
Xlabels <- colnames(X)
Zlabels <- colnames(Z)
y <- stats::model.response(mf)
n <- nrow(X)
p <- ncol(X)
q <- ncol(Z)
if(p>1){
if(match("(Intercept)", Xlabels)==1){
X_std <- scale(X[,-1])
x_mean <- array(c(0, attr(X_std, "scaled:center")))
x_sd <- array(c(1, attr(X_std, "scaled:scale")))
X_std <- cbind(1, X_std)
}else{
X_std <- scale(X)
x_mean <- array(attr(X_std, "scaled:center"))
x_sd <- array(attr(X_std, "scaled:scale"))
}
}else{
X_std <- X
x_mean <- array(0)
x_sd <- array(1)
}
if(q>1){
if(match("(Intercept)", Zlabels)==1){
Z_std <- scale(Z[,-1])
z_mean <- array(c(0, attr(Z_std, "scaled:center")))
z_sd <- array(c(1, attr(Z_std, "scaled:scale")))
Z_std <- cbind(1, Z_std)
}else{
Z_std <- scale(Z)
z_mean <- array(attr(Z_std, "scaled:center"))
z_sd <- array(attr(Z_std, "scaled:scale"))
}
}else{
Z_std <- Z
z_mean <- array(0)
z_sd <- array(1)
}
q
p
stan_data <- list(y=y, X=X_std, Z=Z_std, n=n, p=p, q=q, x_mean=x_mean, x_sd=x_sd, z_mean=z_mean, z_sd=z_sd,
mu_beta = hyperpars$mu_beta, sigma_beta=hyperpars$sigma_beta,
mu_psi = hyperpars$mu_psi, sigma_psi=hyperpars$sigma_psi,
approach=0)
devtools::load_all(".")
library(bellreg)
data(faults)
mle <- bellreg(nf~lroll, data=faults, init=0)
summary(mle)
bayes <- bellreg(nf~lroll, data=faults, approach="bayes")
summary(bayes)
mle2 <- zibellreg(nf~lroll|lroll, data=faults, init=0)
summary(mle2)
bayes2 <- bellreg(nf~lroll|lroll, data=faults, approach="bayes")
data(cells)
head(cells)
bayes3 <- zibellreg(cells~smoker+age+sex|smoker+age+sex, data=cells, approach="bayes")
bayes3 <- zibellreg(cells~sex|sex, data=cells, approach="bayes")
summary(bayes3)
usethis::use_build_ignore(".travis.yml")
?rpois
rtpois
?rtpois
stats::rtpois
x <- rbell(10, theta = 1)
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
usethis::use_build_ignore(".travis.yml")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
usethis::use_build_ignore(".travis.yml")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
?var
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
usethis::use_build_ignore(".travis.yml")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
install.packages("extraDistr")
extraDistr
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
usethis::use_build_ignore(".travis.yml")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
#usethis::use_build_ignore("inst/mystuff")
usethis::use_build_ignore("inst/script_development.R")
usethis::use_build_ignore(".travis.yml")
#usethis::use_git_ignore("inst/mystuff")
#usethis::use_cran_comments()
devtools::document()
devtools::load_all()
devtools::install(quick=TRUE)
#devtools::install()
#devtools::check()
#devtools::build_manual()
